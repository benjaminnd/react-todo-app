{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\minhn\\\\OneDrive\\\\Desktop\\\\projects\\\\react-todo-app\\\\src\\\\components\\\\Todo.js\";\nimport React, { useState, useEffect } from 'react';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\nimport TodoForm from './TodoForm';\n\nfunction Todo({\n  id,\n  task,\n  completed,\n  edit,\n  deleteTodo\n}) {\n  // const [task, setTask] = useState (passedTodo.value)\n  // const [completed, setCompleted] = useState (passedTodo.completed)\n  // const [edit, setEdit] = useState (passedTodo.edit)\n  // useEffect(()=>{\n  //     setTask(passedTodo.value)\n  //     setCompleted(passedTodo.completed)\n  //     setEdit(passedTodo.edit)\n  // }, [passedTodo]);\n  if (edit) {\n    return /*#__PURE__*/React.createElement(TodoForm, {\n      setTask: setTask,\n      setEdit: setEdit,\n      setComplete: setCompleted,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: completed ? 'todo-row-complete' : 'todo-row',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"child\",\n    onClick: () => setCompleted(!completed),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }, \" \", task), /*#__PURE__*/React.createElement(RiCloseCircleLine, {\n    className: \"child\",\n    onClick: () => deleteTodo(id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TiEdit, {\n    className: \"child\",\n    onClick: () => setEdit(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Todo;","map":{"version":3,"sources":["C:/Users/minhn/OneDrive/Desktop/projects/react-todo-app/src/components/Todo.js"],"names":["React","useState","useEffect","RiCloseCircleLine","TiEdit","TodoForm","Todo","id","task","completed","edit","deleteTodo","setTask","setEdit","setCompleted"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,iBAAR,QAAgC,gBAAhC;AACA,SAAQC,MAAR,QAAqB,gBAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,SAASC,IAAT,CAAc;AAACC,EAAAA,EAAD;AAAKC,EAAAA,IAAL;AAAWC,EAAAA,SAAX;AAAsBC,EAAAA,IAAtB;AAA4BC,EAAAA;AAA5B,CAAd,EAAuD;AAEnD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA,MAAGD,IAAH,EAAS;AACL,wBAAO,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAEE,OAAnB;AAA4B,MAAA,OAAO,EAAEC,OAArC;AAA8C,MAAA,WAAW,EAAGC,YAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AACD,sBACI;AAAK,IAAA,SAAS,EAAEL,SAAS,GAAG,mBAAH,GAAwB,UAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAG,IAAA,SAAS,EAAC,OAAb;AAAqB,IAAA,OAAO,EAAE,MAAMK,YAAY,CAAC,CAACL,SAAF,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAgED,IAAhE,CADJ,eAEI,oBAAC,iBAAD;AAAmB,IAAA,SAAS,EAAC,OAA7B;AAAqC,IAAA,OAAO,EAAE,MAAKG,UAAU,CAACJ,EAAD,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAGI,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,OAAlB;AAA0B,IAAA,OAAO,EAAE,MAAMM,OAAO,CAAC,IAAD,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ;AAOH;;AAED,eAAeP,IAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport {RiCloseCircleLine} from 'react-icons/ri';\r\nimport {TiEdit} from 'react-icons/ti';\r\nimport TodoForm from './TodoForm';\r\n\r\nfunction Todo({id, task, completed, edit, deleteTodo}) {\r\n\r\n    // const [task, setTask] = useState (passedTodo.value)\r\n    // const [completed, setCompleted] = useState (passedTodo.completed)\r\n    // const [edit, setEdit] = useState (passedTodo.edit)\r\n\r\n    // useEffect(()=>{\r\n    //     setTask(passedTodo.value)\r\n    //     setCompleted(passedTodo.completed)\r\n    //     setEdit(passedTodo.edit)\r\n    // }, [passedTodo]);\r\n\r\n    if(edit) {\r\n        return <TodoForm setTask={setTask} setEdit={setEdit} setComplete ={setCompleted}/>\r\n    }\r\n    return (\r\n        <div className={completed ? 'todo-row-complete': 'todo-row'}>\r\n            <p className=\"child\" onClick={() => setCompleted(!completed)}> {task}</p>\r\n            <RiCloseCircleLine className=\"child\" onClick={() =>deleteTodo(id)}/>\r\n            <TiEdit className=\"child\" onClick={() => setEdit(true)}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n"]},"metadata":{},"sourceType":"module"}