{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\minhn\\\\OneDrive\\\\Desktop\\\\projects\\\\react-todo-app\\\\src\\\\components\\\\TodoForm.js\";\nimport React, { useState, useEffect, useRef } from 'react';\n\nfunction TodoForm({\n  edit,\n  addTodo,\n  updateTodo,\n  handleUpdate\n}) {\n  const [input, setInput] = useState('');\n  const inputRef = useRef(null);\n  useEffect(() => {\n    inputRef.current.focus();\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (!edit) {\n      console.log(input);\n      addTodo({\n        id: Math.floor(Math.random() * 1000),\n        value: input,\n        edit: false,\n        completed: false\n      });\n    } else {\n      updateTodo({\n        id: edit.id,\n        value: input,\n        edit: false,\n        completed: edit.completed\n      });\n      handleUpdate();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"todo-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: edit ? 'todo-input edit' : 'todo-input',\n    type: \"text\",\n    placeholder: edit ? '' : 'Add Task',\n    value: input,\n    name: \"task\",\n    onChange: e => setInput(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"todo-submit-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, edit ? 'Update' : 'Add'));\n}\n\nexport default TodoForm;","map":{"version":3,"sources":["C:/Users/minhn/OneDrive/Desktop/projects/react-todo-app/src/components/TodoForm.js"],"names":["React","useState","useEffect","useRef","TodoForm","edit","addTodo","updateTodo","handleUpdate","input","setInput","inputRef","current","focus","handleSubmit","e","preventDefault","console","log","id","Math","floor","random","value","completed","target"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,QAAiD,OAAjD;;AAEA,SAASC,QAAT,CAAkB;AAACC,EAAAA,IAAD;AAAMC,EAAAA,OAAN;AAAeC,EAAAA,UAAf;AAA2BC,EAAAA;AAA3B,CAAlB,EAA4D;AACxD,QAAK,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAjC;AAEA,QAAMU,QAAQ,GAAGR,MAAM,CAAC,IAAD,CAAvB;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACVS,IAAAA,QAAQ,CAACC,OAAT,CAAiBC,KAAjB;AACH,GAFQ,CAAT;;AAGA,QAAMC,YAAY,GAAIC,CAAD,IAAM;AACvBA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAG,CAACX,IAAJ,EAAS;AACLY,MAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACAH,MAAAA,OAAO,CAAC;AACJa,QAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,IAA3B,CADA;AAEJC,QAAAA,KAAK,EAAEd,KAFH;AAGJJ,QAAAA,IAAI,EAAE,KAHF;AAIJmB,QAAAA,SAAS,EAAE;AAJP,OAAD,CAAP;AAMH,KARD,MAQK;AACDjB,MAAAA,UAAU,CAAC;AACPY,QAAAA,EAAE,EAAEd,IAAI,CAACc,EADF;AAEPI,QAAAA,KAAK,EAAEd,KAFA;AAGPJ,QAAAA,IAAI,EAAE,KAHC;AAIPmB,QAAAA,SAAS,EAAEnB,IAAI,CAACmB;AAJT,OAAD,CAAV;AAMAhB,MAAAA,YAAY;AACf;AAEJ,GApBD;;AAqBA,sBACI;AAAM,IAAA,SAAS,EAAC,WAAhB;AAA4B,IAAA,QAAQ,EAAEM,YAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,SAAS,EAAGT,IAAI,GAAE,iBAAF,GAAsB,YAA7C;AAA2D,IAAA,IAAI,EAAC,MAAhE;AAAuE,IAAA,WAAW,EAAEA,IAAI,GAAE,EAAF,GAAO,UAA/F;AAA2G,IAAA,KAAK,EAAEI,KAAlH;AAAyH,IAAA,IAAI,EAAC,MAA9H;AAAqI,IAAA,QAAQ,EAAGM,CAAC,IAAIL,QAAQ,CAACK,CAAC,CAACU,MAAF,CAASF,KAAV,CAA7J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAQ,IAAA,SAAS,EAAC,iBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKlB,IAAI,GAAG,QAAH,GAAa,KADtB,CAFJ,CADJ;AAQH;;AAED,eAAeD,QAAf","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\r\n\r\nfunction TodoForm({edit,addTodo, updateTodo, handleUpdate}) {\r\n    const[input, setInput] = useState('');\r\n\r\n    const inputRef = useRef(null)\r\n\r\n    useEffect(()=>{\r\n        inputRef.current.focus();\r\n    })\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        if(!edit){\r\n            console.log(input);\r\n            addTodo({\r\n                id: Math.floor(Math.random() * 1000),\r\n                value: input,\r\n                edit: false,\r\n                completed: false\r\n            });\r\n        }else{\r\n            updateTodo({\r\n                id: edit.id,\r\n                value: input,\r\n                edit: false,\r\n                completed: edit.completed\r\n            })\r\n            handleUpdate()\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n            <input className= {edit? 'todo-input edit' : 'todo-input'} type=\"text\" placeholder={edit? '' : 'Add Task'} value={input} name=\"task\" onChange={ e => setInput(e.target.value)}/>\r\n            <button className=\"todo-submit-btn\">\r\n                {edit ? 'Update': 'Add'}\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n"]},"metadata":{},"sourceType":"module"}