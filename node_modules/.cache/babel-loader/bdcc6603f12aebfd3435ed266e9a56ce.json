{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\minhn\\\\OneDrive\\\\Desktop\\\\projects\\\\react-todo-app\\\\src\\\\components\\\\Todo.js\";\nimport React, { useState } from 'react';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\nimport TodoForm from './TodoForm';\n\nfunction Todo({\n  passedTodo,\n  deleteTodo,\n  updateTodo\n}) {\n  const [todo, setTodo] = useState(passedTodo);\n\n  if (todo.edit) {\n    console.log(todo.edit);\n    return /*#__PURE__*/React.createElement(TodoForm, {\n      edit: todo,\n      updateTodo: updateTodo,\n      setTodo: setTodo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: complete ? 'todo-row-complete' : 'todo-row',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"child\",\n    onClick: e => {\n      setComplete(!complete);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, \" \", todo.value), /*#__PURE__*/React.createElement(RiCloseCircleLine, {\n    className: \"child\",\n    onClick: () => deleteTodo(todo.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TiEdit, {\n    className: \"child\",\n    onClick: () => setEdit(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Todo;","map":{"version":3,"sources":["C:/Users/minhn/OneDrive/Desktop/projects/react-todo-app/src/components/Todo.js"],"names":["React","useState","RiCloseCircleLine","TiEdit","TodoForm","Todo","passedTodo","deleteTodo","updateTodo","todo","setTodo","edit","console","log","complete","e","setComplete","value","id","setEdit"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,iBAAR,QAAgC,gBAAhC;AACA,SAAQC,MAAR,QAAqB,gBAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,SAASC,IAAT,CAAc;AAACC,EAAAA,UAAD;AAAaC,EAAAA,UAAb;AAAyBC,EAAAA;AAAzB,CAAd,EAAoD;AAEhD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAEK,UAAF,CAAhC;;AAEA,MAAGG,IAAI,CAACE,IAAR,EAAc;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACE,IAAjB;AACA,wBAAO,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAEF,IAAhB;AAAsB,MAAA,UAAU,EAAED,UAAlC;AAA8C,MAAA,OAAO,EAAEE,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AACD,sBACI;AAAK,IAAA,SAAS,EAAEI,QAAQ,GAAG,mBAAH,GAAwB,UAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAG,IAAA,SAAS,EAAC,OAAb;AAAqB,IAAA,OAAO,EAAEC,CAAC,IAAI;AAACC,MAAAA,WAAW,CAAC,CAACF,QAAF,CAAX;AAAuB,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA+DL,IAAI,CAACQ,KAApE,CADJ,eAEI,oBAAC,iBAAD;AAAmB,IAAA,SAAS,EAAC,OAA7B;AAAqC,IAAA,OAAO,EAAE,MAAKV,UAAU,CAACE,IAAI,CAACS,EAAN,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAGI,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,OAAlB;AAA0B,IAAA,OAAO,EAAE,MAAKC,OAAO,CAAC,IAAD,CAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ;AAOH;;AAED,eAAed,IAAf","sourcesContent":["import React, {useState} from 'react'\r\nimport {RiCloseCircleLine} from 'react-icons/ri';\r\nimport {TiEdit} from 'react-icons/ti';\r\nimport TodoForm from './TodoForm';\r\n\r\nfunction Todo({passedTodo, deleteTodo, updateTodo}) {\r\n\r\n    const [todo, setTodo] = useState (passedTodo)\r\n\r\n    if(todo.edit) {\r\n        console.log(todo.edit);\r\n        return <TodoForm edit={todo} updateTodo={updateTodo} setTodo={setTodo}/>\r\n    }\r\n    return (\r\n        <div className={complete ? 'todo-row-complete': 'todo-row'}>\r\n            <p className=\"child\" onClick={e => {setComplete(!complete)}}> {todo.value}</p>\r\n            <RiCloseCircleLine className=\"child\" onClick={() =>deleteTodo(todo.id)}/>\r\n            <TiEdit className=\"child\" onClick={() =>setEdit(true)}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n"]},"metadata":{},"sourceType":"module"}